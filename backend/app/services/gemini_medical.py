"""
Google Gemini Medical Text Enhancement Service

This service uses Google's Gemini Pro model to enhance medical transcriptions
by correcting terminology, expanding abbreviations, and improving formatting.
"""

import logging
from typing import Optional, Dict, Any, List

import google.generativeai as genai

from ..config.settings import get_settings

logger = logging.getLogger(__name__)
settings = get_settings()

class GeminiMedicalService:
    """
    Service for enhancing medical text using Google Gemini Pro.
    
    Features:
    - Medical terminology correction and normalization
    - Abbreviation expansion
    - Professional formatting
    - Context-aware medical insights
    - Multiple enhancement modes (correction, explanation, rephrasing)
    """
    
    def __init__(self):
        """Initialize the Gemini client with API key from settings."""
        if not settings.gemini_api_key:
            raise ValueError("Gemini API key is required. Set GEMINI_API_KEY in environment.")
        
        # Configure the Gemini API
        genai.configure(api_key=settings.gemini_api_key)
        
        # Initialize the model without explicit safety settings
        self.model = genai.GenerativeModel(
            model_name=settings.gemini_model,
        )
        
        logger.info("Gemini medical enhancement service initialized")
    
    async def enhance_medical_text(
        self,
        transcribed_text: str,
        enhancement_mode: str = "correction",
        language: str = "en"
    ) -> Dict[str, Any]:
        """
        Enhance medical transcription text using Gemini.
        
        Args:
            transcribed_text: Raw transcription text from STT
            enhancement_mode: Type of enhancement ("correction", "explanation", "rephrase")
            language: Target language for enhancement
            
        Returns:
            Dictionary containing enhanced text and metadata
        """
        try:
            # Get the appropriate prompt for the enhancement mode
            prompt = self._get_enhancement_prompt(transcribed_text, enhancement_mode, language)
            
            logger.info(f"Starting medical text enhancement with mode: {enhancement_mode}")
            
            # Call without per-call safety_settings
            response = self.model.generate_content(prompt)

            # Extract and validate response
            if not getattr(response, 'text', None):
                raise Exception("No text generated by Gemini model")
            
            enhanced_text = response.text.strip()
            
            # Analyze the enhancement quality
            analysis = self._analyze_enhancement(transcribed_text, enhanced_text, enhancement_mode)
            
            result = {
                "original_text": transcribed_text,
                "enhanced_text": enhanced_text,
                "enhancement_mode": enhancement_mode,
                "language": language,
                "success": True,
                "analysis": analysis,
                "metadata": {
                    "model": settings.gemini_model,
                    "prompt_tokens": len(prompt.split()),
                    "response_tokens": len(enhanced_text.split()),
                    "safety_ratings": getattr(response, 'safety_ratings', [])
                }
            }
            
            logger.info("Medical text enhancement completed successfully")
            return result
            
        except Exception as e:
            logger.error(f"Error during medical text enhancement: {str(e)}")
            return {
                "original_text": transcribed_text,
                "enhanced_text": transcribed_text,  # Fallback to original
                "enhancement_mode": enhancement_mode,
                "language": language,
                "success": False,
                "error": str(e)
            }
    
    def _get_enhancement_prompt(self, text: str, mode: str, language: str) -> str:
        """
        Generate the appropriate prompt for medical text enhancement.
        
        Args:
            text: Original transcribed text
            mode: Enhancement mode
            language: Target language
            
        Returns:
            Formatted prompt string
        """
        base_context = f"""You are a medical documentation editor.
- Perform editorial transformations only (spelling/grammar/terminology/formatting).
- Do not provide medical advice, diagnosis, treatment recommendations, or instructions.
- Do not add new clinical content beyond what is present.
- Keep content informational and non-prescriptive.

Language: {language}
Original transcribed text: "{text}"

"""
        
        if mode == "correction":
            return base_context + """Please enhance this medical transcription by:

1. Correct medical terminology and obvious transcription errors.
2. Expand common abbreviations when it improves clarity.
3. Improve grammar and structure while preserving meaning.
4. Standardize professional medical documentation formatting.
5. Preserve clinical intent without adding advice.

Enhanced text:"""
        
        elif mode == "explanation":
            return base_context + """Provide non-advisory explanations for educational purposes:

- Define medical terms in simple, general language.
- Clarify procedures at a high level only (no guidance or instructions).
- Explain context without giving medical recommendations.

Format:
Original (lightly corrected if needed):
[Corrected text]

Explanation (non-advisory):
[Clear, accessible description]

Key Terms:
- [Term]: [General definition]

Response:"""
        
        elif mode == "rephrase":
            return base_context + """Rephrase using professional medical language while keeping identical clinical meaning. Improve clarity and readability without adding recommendations or instructions.

Rephrased text:"""
        
        else:
            # Default to correction mode
            return self._get_enhancement_prompt(text, "correction", language)
    
    def _analyze_enhancement(self, original: str, enhanced: str, mode: str) -> Dict[str, Any]:
        """
        Analyze the quality and characteristics of the enhancement.
        
        Args:
            original: Original text
            enhanced: Enhanced text
            mode: Enhancement mode used
            
        Returns:
            Analysis results
        """
        return {
            "original_length": len(original),
            "enhanced_length": len(enhanced),
            "length_change_percent": ((len(enhanced) - len(original)) / len(original) * 100) if original else 0,
            "original_word_count": len(original.split()),
            "enhanced_word_count": len(enhanced.split()),
            "enhancement_type": mode,
            "has_medical_terms": self._contains_medical_terms(enhanced),
            "readability_improved": len(enhanced.split()) >= len(original.split())  # Simple heuristic
        }
    
    def _contains_medical_terms(self, text: str) -> bool:
        """
        Check if text contains common medical terminology.
        
        Args:
            text: Text to analyze
            
        Returns:
            True if medical terms are detected
        """
        medical_indicators = [
            "itis", "osis", "emia", "pathy", "scopy", "gram", "therapy",
            "medical", "clinical", "diagnosis", "treatment", "patient",
            "symptoms", "condition", "procedure", "examination", "mg", "ml",
            "dosage", "medication", "prescription", "blood pressure"
        ]
        
        text_lower = text.lower()
        return any(indicator in text_lower for indicator in medical_indicators)
    
    async def get_supported_modes(self) -> List[Dict[str, str]]:
        """
        Get the list of supported enhancement modes.
        
        Returns:
            List of available enhancement modes with descriptions
        """
        return [
            {
                "mode": "correction",
                "name": "Medical Correction",
                "description": "Correct medical terminology, expand abbreviations, and improve formatting"
            },
            {
                "mode": "explanation", 
                "name": "Medical Explanation",
                "description": "Provide non-advisory explanations of medical terms and procedures"
            },
            {
                "mode": "rephrase",
                "name": "Professional Rephrasing", 
                "description": "Rephrase using professional medical language for better clarity"
            }
        ]
